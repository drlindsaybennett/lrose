/**********************************************************************
 * TDRP params for GemScan2Dsr
 **********************************************************************/

//======================================================================
//
// GemScan2Dsr reads in Gematronik Scan format volume files and 
//   reformats the contents into a DsRadar FMQ.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "test";

//======================================================================
//
// MODE OF OPERATION.
//
//======================================================================
 
///////////// mode ////////////////////////////////////
//
// Operating mode.
// In REALTIME mode, the program waits for a new input file. In ARCHIVE 
//   mode, it moves through the list of file names specified on the 
//   command line. In SIMULATE mode, the program moves repeatedly through 
//   the file list, creating output files with times set to now. This is 
//   useful for simulating an operational radar.
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//     SIMULATE
//

mode = ARCHIVE;

///////////// simulate_sleep_secs /////////////////////
//
// Sleep between files in simulate mode (secs).
// Type: int
//

simulate_sleep_secs = 180;

//======================================================================
//
// GEMATRONIK FILE DATA INPUT.
//
//======================================================================
 
///////////// input_dir ///////////////////////////////
//
// Dir for input data files.
// This is used in REALTIME mode only. In ARCHIVE and SIMULATE modes, 
//   the file paths are specified on the command line.
// Type: string
//

input_dir = "$(HOME)/data/gematronik/radar";

///////////// use_ldata_info_file /////////////////////
//
// Option to use _latest_data_info file as input trigger.
// REALTIME mode only. If true, waits on _latest_data_info file. If 
//   false, scans the directory for new file.
// Type: boolean
//

use_ldata_info_file = FALSE;

///////////// max_realtime_valid_age //////////////////
//
// Max valid age of rdata input files in realtime mode (secs).
// This the max valid age for an incoming file. The program will wait 
//   for a data file more recent than this age.
// Minimum val: 1
// Type: int
//

max_realtime_valid_age = 360;

//======================================================================
//
// RADAR PARAMS.
//
// These parameters are not available in the input data file.
//
//======================================================================
 
///////////// radar ///////////////////////////////////
//
// Radar params. These params are not in the input data files.
// ========== Radar params ==========
// 	
// samples_per_beam: number of samples used in computing moments
// polarization: polarization type
// beam_width: half-power beam width - degrees
// pulse_width: nano-secs
// prf: /s
// wavelength: cm
// radar_constant: dB
// xmit_peak_pwr: watts
// receiver_mds: dBm
// receiver_gain: dB
// antenna_gain: dB
// system_gain: dB
// 	.
//
// Type: struct
//   typedef struct {
//      int samples_per_beam;
//      polar_t polarization;
//        Options:
//          HORIZONTAL
//          VERTICAL
//          CIRCULAR
//          ELLIPTICAL
//          DUAL
//      double beam_width;
//      double pulse_width;
//      double prf;
//      double wavelength;
//      double radar_constant;
//      double xmit_peak_pwr;
//      double receiver_mds;
//      double receiver_gain;
//      double antenna_gain;
//      double system_gain;
//   }
//
//

radar = { 64, CIRCULAR, 1, 1, 500, 5, 86, 400000, -113, 45, 44, 40 };

//======================================================================
//
// RADAR LOCATOIN.
//
// The altitude must be set, since it is not in the input files. The alt 
//   and lon can normally be obtained from the input file. If you wish to 
//   override the lat/lon in the input file, you must set the values here.
//
//======================================================================
 
///////////// radar_altitude //////////////////////////
//
// Radar altitude (km).
// ALWAYS used. No altitude available in data.
// Type: double
//

radar_altitude = 0;

///////////// override_radar_location /////////////////
//
// Option to override input data stream with user-specified latitude and 
//   longitude.
// If TRUE, these values will be used instead of the values in the input 
//   files.
// Type: boolean
//

override_radar_location = FALSE;

///////////// radar_latitude //////////////////////////
//
// Radar latitude (deg).
// Used if override_radar_location is TRUE.
// Type: double
//

radar_latitude = 0;

///////////// radar_longitude /////////////////////////
//
// Radar longitude (deg).
// Used if override_radar_location is TRUE.
// Type: double
//

radar_longitude = 0;

//======================================================================
//
// SCAN INFORMATION.
//
// May be used by downstream processes. Can normally safely use the 
//   defaults.
//
//======================================================================
 
///////////// scan_type_id ////////////////////////////
//
// Scan type id.
// Unique identifier for scan strategy.
// Type: int
//

scan_type_id = 0;

///////////// scan_type_name //////////////////////////
//
// Scan type name.
// Descriptive name for scan strategy.
// Type: string
//

scan_type_name = "Surveillance";

//======================================================================
//
// OUTPUT FILE MESSAGE QUEUE - FMQ.
//
//======================================================================
 
///////////// output_fmq_url //////////////////////////
//
// Output URL for DsRadar data via FMQ.
// Type: string
//

output_fmq_url = "fmqp:://localhost::fmq/dsRadar";

///////////// output_fmq_size /////////////////////////
//
// Size of output FMQ, in bytes.
// This is the total size of the output FMQ buffer. Some of this buffer 
//   will be used for control bytes (12 bytes per message).
// Type: int
//

output_fmq_size = 10000000;

///////////// output_fmq_nslots ///////////////////////
//
// Number of slots in output FMQ.
// The number of slots corresponds to the maximum number of messages 
//   which may be written to the buffer before overwrites occur. However, 
//   overwrites may occur sooner if the size is not set large enough.
// Type: int
//

output_fmq_nslots = 4800;

///////////// output_fmq_compress /////////////////////
//
// FMQ compression option.
// If TRUE FMQ messages are compressed.
// Type: boolean
//

output_fmq_compress = FALSE;

///////////// beam_wait_msecs /////////////////////////
//
// Wait per beam (milli-secs).
// Type: int
//

beam_wait_msecs = 0;

///////////// write_blocking //////////////////////////
//
// Option to set up the FMQ as blocking.
// If TRUE, FMQ will be set up FMQ for blocking operation. If the FMQ 
//   becomes full, Test2Dsr will then block until there is space for more 
//   data.
// Type: boolean
//

write_blocking = FALSE;

